{"version":3,"sources":["components/uploader/uploader.component.jsx","components/help/help.component.jsx","App.js","serviceWorker.js","index.js"],"names":["MyUploader","getUploadParams","url","onChangeStatus","status","meta","console","log","fetch","then","resp","blob","window","URL","createObjectURL","a","document","createElement","style","display","href","download","name","body","appendChild","click","revokeObjectURL","catch","maxFiles","multiple","canCancel","accept","inputContent","files","extra","reject","styles","dropzone","border","width","height","overflow","dropzoneActive","borderColor","inputLabel","fontFamily","color","Help","Box","pad","Markdown","theme","global","colors","brand","font","family","size","AppBar","props","tag","direction","align","justify","background","left","right","vertical","elevation","zIndex","App","useState","showSidebar","setShowSidebar","Grommet","themeMode","full","ResponsiveContext","Consumer","fill","Heading","level","margin","Button","icon","CircleQuestion","onClick","flex","horizontal","Layer","FormClose","Collapsible","open","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iRAIaA,G,MAAa,WA6BtB,OACI,kBAAC,IAAD,CACIC,gBA7BgB,WACpB,MAAO,CAAEC,IAAK,YA6BVC,eA1BmB,SAAC,EAAUC,GAAY,IAApBC,EAAmB,EAAnBA,KAC1BC,QAAQC,IAAIH,EAAQC,GACN,QAAVD,GACFI,MAAM,aAELC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAE,GACJ,IAAMT,EAAMU,OAAOC,IAAIC,gBAAgBH,GACjCI,EAAIC,SAASC,cAAc,KACjCF,EAAEG,MAAMC,QAAU,OAClBJ,EAAEK,KAAOlB,EAETa,EAAEM,SAAWhB,EAAKiB,KAClBN,SAASO,KAAKC,YAAYT,GAC1BA,EAAEU,QACFb,OAAOC,IAAIa,gBAAgBxB,MAG5ByB,OAAM,kBAAMrB,QAAQC,IAAI,cASvBqB,SAAU,EACVC,UAAU,EACVC,WAAW,EACXC,OAAO,oEACPC,aAAc,SAACC,EAAOC,GAAR,OAAmBA,EAAMC,OAAS,kBAAoB,kBACpEC,OAAQ,CACNC,SAAU,CAAEC,OAAQ,qBACRC,MAAO,IACPC,OAAQ,IACRC,SAAU,QAEtBC,eAAgB,CAAEC,YAAa,WAC/BC,WAAY,SAACX,EAAOC,GAAR,OACTA,EAAMC,OAAS,CAAEU,WAAY,SAAUC,MAAO,OAAU,CAAED,WAAY,SAAUC,MAAO,iB,QC5C3FC,EAAO,WAClB,OACE,kBAACC,EAAA,EAAD,CAAKC,IAAI,SACP,kBAACC,EAAA,EAAD,8SCIAC,EAAQ,CACZC,OAAQ,CACNC,OAAQ,CACNC,MAAO,WAETC,KAAM,CACJC,OAAQ,SACRC,KAAM,OACNjB,OAAQ,UAIRkB,EAAS,SAACC,GAAD,OACb,kBAACX,EAAA,EAAD,eACEY,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,QACXf,IAAK,CAAEgB,KAAM,SAAUC,MAAO,QAASC,SAAU,SACjDC,UAAU,SACVlD,MAAO,CAAEmD,OAAQ,MACbV,KAkEOW,MA/Df,WAAgB,IAAD,EACyBC,oBAAS,GADlC,mBACNC,EADM,KACOC,EADP,KAEb,OACE,kBAACC,EAAA,EAAD,CAASvB,MAAOA,EAAOwB,UAAU,OAAOC,MAAI,GAC1C,kBAACC,EAAA,EAAkBC,SAAnB,MACG,SAAArB,GAAI,OACP,kBAACT,EAAA,EAAD,CAAK+B,MAAI,GACP,kBAAC,EAAD,KACE,kBAACC,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,QAA1B,8BACA,kBAACC,EAAA,EAAD,CACEC,KAAM,kBAACC,EAAA,EAAD,MACNC,QAAS,kBAAMb,GAAgBD,OAGnC,kBAACxB,EAAA,EAAD,CAAKa,UAAU,MAAM0B,MAAI,EAAC9C,SAAU,CAAE+C,WAAY,WAChD,kBAACxC,EAAA,EAAD,CAAKuC,MAAI,EAACzB,MAAM,SAASC,QAAQ,UAC7B,kBAAC,EAAD,OAEDS,GAAwB,UAATf,EAchB,kBAACgC,EAAA,EAAD,KACE,kBAACzC,EAAA,EAAD,CACEgB,WAAW,UACXJ,IAAI,SACJG,QAAQ,MACRD,MAAM,SACND,UAAU,OAEV,kBAACsB,EAAA,EAAD,CACEC,KAAM,kBAACM,EAAA,EAAD,MACNJ,QAAS,kBAAMb,GAAe,OAGlC,kBAACzB,EAAA,EAAD,CACE+B,MAAI,EACJf,WAAW,UACXF,MAAM,QACNC,QAAQ,UAER,kBAAC,EAAD,QAhCJ,kBAAC4B,EAAA,EAAD,CAAa9B,UAAU,aAAa+B,KAAMpB,GACxC,kBAACxB,EAAA,EAAD,CACEuC,MAAI,EACJhD,MAAM,SACNyB,WAAW,UACXI,UAAU,QACVN,MAAM,QACNC,QAAQ,UAER,kBAAC,EAAD,eCtDI8B,QACW,cAA7BjF,OAAOkF,SAASC,UAEe,UAA7BnF,OAAOkF,SAASC,UAEhBnF,OAAOkF,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnF,SAASoF,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9F,MAAK,SAAA+F,GACJA,EAAaC,gBAEd9E,OAAM,SAAA+E,GACLpG,QAAQoG,MAAMA,EAAMC,c","file":"static/js/main.46b339d8.chunk.js","sourcesContent":["import React from 'react';\nimport Dropzone from 'react-dropzone-uploader'\nimport 'react-dropzone-uploader/dist/styles.css'\n\nexport const MyUploader = () => {\n\n    const getUploadParams = () => {\n        return { url: '/upload' }\n      }\n  \n    const handleChangeStatus = ({ meta }, status) => {\n        console.log(status, meta)\n        if (status == 'done') {\n          fetch('/download')\n          // https://stackoverflow.com/a/9834261\n          .then(resp => resp.blob())\n          .then(blob => {\n            const url = window.URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.style.display = 'none';\n            a.href = url;\n            // the filename you want\n            a.download = meta.name;\n            document.body.appendChild(a);\n            a.click();\n            window.URL.revokeObjectURL(url);\n            //alert('your file has downloaded!'); // or you know, something with better UX...\n          })\n          .catch(() => console.log('oh no!'));\n        }\n    }\n  \n     \n    return (\n        <Dropzone\n            getUploadParams={getUploadParams}\n            onChangeStatus={handleChangeStatus}\n            maxFiles={1}\n            multiple={false}\n            canCancel={false}\n            accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n            inputContent={(files, extra) => (extra.reject ? 'XLSX files only' : 'Drop XLSX File')}\n            styles={{\n              dropzone: { border: '4px dashed #f2f2f2',\n                          width: 400,\n                          height: 200,\n                          overflow: 'auto',\n                        },\n              dropzoneActive: { borderColor: '#01A460' },\n              inputLabel: (files, extra) => \n                (extra.reject ? { fontFamily: 'Roboto', color: 'red' } : { fontFamily: 'Roboto', color: '#01A460'}),\n            }}\n        />\n    )\n  }\n","import React from 'react';\nimport {\n    Box,\n    Markdown,\n  } from 'grommet';\n\nexport const Help = () => {\n  return (\n    <Box pad=\"small\">\n      <Markdown>{\n`## How to use\n\nUpload CCW estimate in XLSx format. Resulting file will be downloaded automatically.\n        \n## Matching criteria\n* Part Numbers starting with **R-**, **L-**, **S-**, **LIC-** or ending with **Y** and **Price > 0**\n* Description contains **eDelivery** and **Price > 0**`}\n      </Markdown>\n    </Box>\n  )\n}","import React, { useState } from \"react\";\nimport {\n    Box,\n    Button,\n    Collapsible,\n    Heading,\n    Grommet,\n    Layer,\n    ResponsiveContext,\n  } from 'grommet';\nimport { CircleQuestion, FormClose } from 'grommet-icons';\nimport { MyUploader } from './components/uploader/uploader.component';\nimport { Help } from './components/help/help.component';\nconst theme = {\n  global: {\n    colors: {\n      brand: '#01A460',\n    },\n    font: {\n      family: 'Roboto',\n      size: '18px',\n      height: '20px',\n    },\n  },\n};\nconst AppBar = (props) => (\n  <Box\n    tag='header'\n    direction='row'\n    align='center'\n    justify='between'\n    background='brand'\n    pad={{ left: 'medium', right: 'small', vertical: 'small' }}\n    elevation='medium'\n    style={{ zIndex: '1' }}\n    {...props}\n  />\n);\nfunction App() {\n  const [showSidebar, setShowSidebar] = useState(false);\n  return (\n    <Grommet theme={theme} themeMode=\"dark\" full>\n      <ResponsiveContext.Consumer>\n        {size => (\n      <Box fill>\n        <AppBar>\n          <Heading level='3' margin='none'>Cisco Estimate Highlighter</Heading>\n          <Button\n            icon={<CircleQuestion />}\n            onClick={() => setShowSidebar(!showSidebar)}\n          />        \n        </AppBar>\n        <Box direction='row' flex overflow={{ horizontal: 'hidden' }}>\n          <Box flex align='center' justify='center'>\n              <MyUploader />\n          </Box>\n          {(!showSidebar || size !== 'small') ? (\n            <Collapsible direction=\"horizontal\" open={showSidebar}>\n              <Box\n                flex\n                width='medium'\n                background='light-2'\n                elevation='small'\n                align='start'\n                justify='center'\n              >\n                <Help />\n              </Box>\n            </Collapsible>\n          ): (\n            <Layer>\n              <Box\n                background='light-2'\n                tag='header'\n                justify='end'\n                align='center'\n                direction='row'\n              >\n                <Button\n                  icon={<FormClose />}\n                  onClick={() => setShowSidebar(false)}\n                />\n              </Box>\n              <Box\n                fill\n                background='light-2'\n                align='start'\n                justify='center'\n              >\n                <Help />\n              </Box>\n            </Layer>\n          )}\n        </Box>\n      </Box>\n      )}\n      </ResponsiveContext.Consumer>\n    </Grommet>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}